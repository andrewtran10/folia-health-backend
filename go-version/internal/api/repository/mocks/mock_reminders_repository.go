// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/repository/reminders_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/api/repository/reminders_repository.go -destination=internal/api/repository/mocks/mock_reminders_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "go-version/internal/api/domain"
	repository "go-version/internal/api/repository"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReminderRepositoryInterface is a mock of ReminderRepositoryInterface interface.
type MockReminderRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockReminderRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockReminderRepositoryInterfaceMockRecorder is the mock recorder for MockReminderRepositoryInterface.
type MockReminderRepositoryInterfaceMockRecorder struct {
	mock *MockReminderRepositoryInterface
}

// NewMockReminderRepositoryInterface creates a new mock instance.
func NewMockReminderRepositoryInterface(ctrl *gomock.Controller) *MockReminderRepositoryInterface {
	mock := &MockReminderRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockReminderRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReminderRepositoryInterface) EXPECT() *MockReminderRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateReminder mocks base method.
func (m *MockReminderRepositoryInterface) CreateReminder(ctx context.Context, params *domain.ReminderCreateDomain) (*repository.ReminderCreateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReminder", ctx, params)
	ret0, _ := ret[0].(*repository.ReminderCreateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReminder indicates an expected call of CreateReminder.
func (mr *MockReminderRepositoryInterfaceMockRecorder) CreateReminder(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReminder", reflect.TypeOf((*MockReminderRepositoryInterface)(nil).CreateReminder), ctx, params)
}

// DeleteReminder mocks base method.
func (m *MockReminderRepositoryInterface) DeleteReminder(ctx context.Context, params *domain.ReminderDeleteDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReminder", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReminder indicates an expected call of DeleteReminder.
func (mr *MockReminderRepositoryInterfaceMockRecorder) DeleteReminder(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReminder", reflect.TypeOf((*MockReminderRepositoryInterface)(nil).DeleteReminder), ctx, params)
}

// ListReminders mocks base method.
func (m *MockReminderRepositoryInterface) ListReminders(ctx context.Context, params *domain.ReminderListDomain) (*repository.ReminderListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReminders", ctx, params)
	ret0, _ := ret[0].(*repository.ReminderListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReminders indicates an expected call of ListReminders.
func (mr *MockReminderRepositoryInterfaceMockRecorder) ListReminders(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReminders", reflect.TypeOf((*MockReminderRepositoryInterface)(nil).ListReminders), ctx, params)
}

// UpdateReminder mocks base method.
func (m *MockReminderRepositoryInterface) UpdateReminder(ctx context.Context, params *domain.ReminderUpdateDomain) (*repository.ReminderUpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReminder", ctx, params)
	ret0, _ := ret[0].(*repository.ReminderUpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReminder indicates an expected call of UpdateReminder.
func (mr *MockReminderRepositoryInterfaceMockRecorder) UpdateReminder(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReminder", reflect.TypeOf((*MockReminderRepositoryInterface)(nil).UpdateReminder), ctx, params)
}
